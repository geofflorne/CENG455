/* ###################################################################
**     Filename    : os_tasks.c
**     Project     : serial_echo
**     Processor   : MK64FN1M0VLL12
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-01-30, 15:47, # CodeGen: 1
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Settings    :
**     Contents    :
**         serial_task - void serial_task(os_task_param_t task_init_data);
**
** ###################################################################*/
/*!
** @file os_tasks.c
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup os_tasks_module os_tasks module documentation
**  @{
*/         
/* MODULE os_tasks */

#include "Cpu.h"
#include "Events.h"
#include "rtos_main_task.h"
#include "os_tasks.h"
#include "funcs.h"
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif 


/* User includes (#include below this line is not maintained by Processor Expert) */

/*
** ===================================================================
**     Callback    : serial_task
**     Description : Task function entry.
**     Parameters  :
**       task_init_data - OS task parameter
**     Returns : Nothing
** ===================================================================
*/
void serial_task(os_task_param_t task_init_data)
{
  /* Write your local variable definition here */

//	mutex here for user tasks

//printf("serialTask Created! \n\r");
//char buf[13];
//sprintf(buf, "\n\rType here: ");
//UART_DRV_SendDataBlocking(myUART_IDX, buf, sizeof(buf), 1000);
//
//#ifdef PEX_USE_RTOS
//  while (1) {
//#endif
//    /* Write your code here ... */
//
//    OSA_TimeDelay(10);                 /* Example code (for task release) */
//
//#ifdef PEX_USE_RTOS
//  }
//#endif
}

/*
** ===================================================================
**     Callback    : handler_task
**     Description : Task function entry.
**     Parameters  :
**       task_init_data - OS task parameter
**     Returns : Nothing
** ===================================================================
*/
void handler_task(os_task_param_t task_init_data) // grab chars from handler queue and send to uart for printing
{
	output_buf_idx = 0;

	printf("handler task Created! \n\r");
	// send to terminal using senduart function
	// send chars to terminal char by char
	/* Write your local variable definition here */
	HANDLER_MESSAGE_PTR msg_ptr;
	_queue_id handler_qid = _msgq_open(HANDLER_QUEUE, 0);

	if (handler_qid == 0) {
		  printf("\nCould not open the handler message queue\n");
		  _task_block();
	}

	/* create a message pool */
   message_pool = _msgpool_create(sizeof(HANDLER_MESSAGE), 1, 0, 0);

   if (message_pool == MSGPOOL_NULL_POOL_ID) {
	  printf("\nCount not create a message pool\n");
	  _task_block();
   }



//	Initialize system
//	Do forever
//	 Check handler queue
//	 If a user task has opened the device for reading
//	 Determine what the character is
//	 If the character is printable put it in the notification queue
//	 Else if the character is a special character, handle it appropriately
//	 Else if the character is none of the above, ignore it
//	 Else discard the character

  
#ifdef PEX_USE_RTOS
  while (1) {
#endif
    
	int i = 0;
    msg_ptr = _msgq_receive(handler_qid, 0);
    if (msg_ptr == NULL) {
   		printf("\nCould not receive a message\n");
   		_task_block();
   	 }

   	//printf("message from ISR: %s \n", msg_ptr->DATA);
    char * message  = msg_ptr->DATA;
    //UART_DRV_SendData(myUART_IDX, message, sizeof(message));
    
    while(message[i] != '\0'){
    	unsigned char c = message[i];
    	updateOutput(c);
    	break;
    	i++;
    }
    _msg_free(msg_ptr);
    
#ifdef PEX_USE_RTOS   
  }
#endif    
}

/*
** ===================================================================
**     Callback    : user_task
**     Description : Task function entry.
**     Parameters  :
**       task_init_data - OS task parameter
**     Returns : Nothing
** ===================================================================
*/
void user_task(os_task_param_t task_init_data)
{


  /* Write your local variable definition here */

	//user message queue and pool here
  
#ifdef PEX_USE_RTOS
  while (1) {
#endif
    printf("in usertask\n");
    _task_block();
    
#ifdef PEX_USE_RTOS   
  }
#endif    
}
