#include "os_tasks.h"
#include "funcs.h"

// modify output buffer according to character
// clear current line
// re-print output buffer
#define CTRLW 0x17 // erase previous word
#define CTRLU 0x15 // erase line

updateOutput(char input) {
	updateOutputBuffer(input);
//	clearCurrentLine();
//	printOutputBuffer();
}

void updateOutputBuffer(char c) {
	char ctrlw = 0x17; // erase previous word
	char ctrlu = 0x15; // erase line

	// modify output buffer according to character
	//check if char is valid ascii character
	printf("at idx: %i before updating buffer\n", output_buf_idx);
	if((int)c >= 32 && (int)c <= 126){
		if (!(output_buf_idx >= OUTPUT_BUF_LEN)) {
			output_buf[output_buf_idx] = c;
			output_buf_idx++;
			UART_DRV_SendData(myUART_IDX, &c, sizeof(c));
		}
	}
	else{
		switch((int)c){
		case 8: // If delete
			// clear current char
			if (!(output_buf_idx == 0)) { // if idx is zero, nothing in buffer
				deleteCharFromBuffer(output_buf_idx);
				output_buf_idx--;
			}
			break;
		case CTRLW:
			printf("^w seen");
			printf("deleting char: %c\n", output_buf[output_buf_idx - 1]);
			if (output_buf[output_buf_idx - 1] == 32) { // space
				// delete the space
				printf("deleting a space\n");
				UART_DRV_SendDataBlocking(myUART_IDX, "\b \b", 3, 1000); // delete the current character from output
				output_buf[output_buf_idx - 1] = '\0';
				if (output_buf_idx > 0) { // if zero, buffer is empty
					output_buf_idx--;
				}
				break;
			}
			for( output_buf_idx; (output_buf_idx > 0 && output_buf[output_buf_idx - 1] != ' '); output_buf_idx--) {
				printf("deleting char: %c at idx: %i\n", output_buf[output_buf_idx], output_buf_idx);
				deleteCharFromBuffer(output_buf_idx);
			}
			break;
		case CTRLU:
			printf("^u seen");
			for( output_buf_idx; output_buf_idx > 0; output_buf_idx--) {
				printf("deleting idx %i\n", output_buf_idx);
				deleteCharFromBuffer(output_buf_idx);
			}
			break;
	    default:
	    	break;
	    }
	}
}

void deleteCharFromBuffer(int curr_buff_idx) {
	UART_DRV_SendDataBlocking(myUART_IDX, "\b \b", 3, 1000); // delete the current character from output
	output_buf[output_buf_idx] = '\0';
}

void clearCurrentLine() {
//	char space = ' ';
//	printf("clearing\n");
//	UART_DRV_SendDataBlocking(myUART_IDX, '\r', sizeof('\r'), 99999);
//	for(int i = 0; i <= output_buf_idx; i++) {
//		printf("loop\n");
//		UART_DRV_SendDataBlocking(myUART_IDX, space, sizeof(space),99999);
//	}
//	UART_DRV_SendDataBlocking(myUART_IDX, '\r', sizeof('\r'), 99999);
}

void printOutputBuffer() {
	//printf("printing buffer\n");
	for(int i = 0; i <= output_buf_idx; i++) {
		UART_DRV_SendDataBlocking(myUART_IDX, output_buf[i], sizeof(output_buf[i]), 999999);
	}
}
