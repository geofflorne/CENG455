#include "os_tasks.h"
#include "funcs.h"

// modify output buffer according to character
// clear current line
// re-print output buffer

updateOutput(char input) {
	updateOutputBuffer(input);
//	clearCurrentLine();
//	printOutputBuffer();
}

void updateOutputBuffer(char c) {
	char ctrlw = 0x17; // erase previous word
	char ctrlu = 0x15; // erase line

	// modify output buffer according to character
	//check if char is valid ascii character
	printf("idx: %i\n", output_buf_idx);
	if((int)c >= 32 && (int)c <= 126){
		if (!(output_buf_idx >= OUTPUT_BUF_LEN)) {
			output_buf[output_buf_idx] = c;
			output_buf_idx++;
			printf("adding to outputbuf\n");
			UART_DRV_SendData(myUART_IDX, &c, sizeof(c));
		}
	}
	else{
		switch((int)c){
		case 8:
			// clear current line
			// re-print output buffer
			if (!(output_buf_idx == 0)) {
				UART_DRV_SendData(myUART_IDX, "\b \b", 3);
				output_buf[output_buf_idx] = '\0';
				output_buf_idx--;
			}
			break;
		case ctrlw:
			printf('^w seen');
			break;
		case ctrlh:
			printf('^w seen');
			break;
	    default:

	    	break;
	    }
	}
}

void clearCurrentLine() {
//	char space = ' ';
//	printf("clearing\n");
//	UART_DRV_SendDataBlocking(myUART_IDX, '\r', sizeof('\r'), 99999);
//	for(int i = 0; i <= output_buf_idx; i++) {
//		printf("loop\n");
//		UART_DRV_SendDataBlocking(myUART_IDX, space, sizeof(space),99999);
//	}
//	UART_DRV_SendDataBlocking(myUART_IDX, '\r', sizeof('\r'), 99999);
}

void printOutputBuffer() {
	//printf("printing buffer\n");
	for(int i = 0; i <= output_buf_idx; i++) {
		UART_DRV_SendDataBlocking(myUART_IDX, output_buf[i], sizeof(output_buf[i]), 999999);
	}
}
