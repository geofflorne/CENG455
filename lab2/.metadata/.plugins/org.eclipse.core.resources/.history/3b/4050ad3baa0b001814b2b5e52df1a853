/* ###################################################################
**     Filename    : Events.c
**     Project     : serial_echo
**     Processor   : MK64FN1M0VLL12
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2018-01-30, 15:23, # CodeGen: 0
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file Events.c
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup Events_module Events module documentation
**  @{
*/         
/* MODULE Events */

#include "Cpu.h"
#include "Events.h"
#include "rtos_main_task.h"
#include "os_tasks.h"
#include <stdio.h>

#ifdef __cplusplus
extern "C" {
#endif 


/* User includes (#include below this line is not maintained by Processor Expert) */

/*
** ===================================================================
**     Callback    : myUART_RxCallback
**     Description : This callback occurs when data are received.
**     Parameters  :
**       instance - The UART instance number.
**       uartState - A pointer to the UART driver state structure
**       memory.
**     Returns : Nothing
** ===================================================================
*/
void myUART_RxCallback(uint32_t instance, void * uartState) // ISR
{
	// TODO
	// Send data to handler task's input queue.

	//char err[20];

//	HANDLER_MESSAGE_PTR msg_ptr;
//	_queue_id isr_qid;
//	isr_qid = _msgq_open(ISR_QUEUE, 0);
//
//	if (isr_qid == 0) {
//	      printf("\nCould not open a handler message queue\n");
//	      _task_block();
//	   }


  // Placeholder: send char to output buffer to be sent over serial port to terminal
  UART_DRV_SendData(myUART_IDX, myRxBuff, sizeof(myRxBuff));

  HANDLER_MESSAGE_PTR msg_ptr;
  msg_ptr = (HANDLER_MESSAGE_PTR)_msg_alloc(message_pool);
  bool result;

  if (msg_ptr == NULL) {
    printf("\nCould not allocate a message\n");
              _task_block();
  }

  //msg_ptr->HEADER.SOURCE_QID = hello_qid;
  msg_ptr->HEADER.TARGET_QID = _msgq_get_id(0, HANDLER_QUEUE);
  msg_ptr->HEADER.SIZE = sizeof(MESSAGE_HEADER_STRUCT) +
  strlen((char *)msg_ptr->DATA) + 1;
  char *our_msg = "msgfromISR";
  msg_ptr->DATA = our_msg;

  result = _msgq_send(msg_ptr);

  if (result != TRUE) {
    printf("\nCould not send a message\n");
    _task_block();
  }

  return;
}

/*
** ===================================================================
**     Callback    : myUART_RxCallback
**     Description : This callback occurs when data are received.
**     Parameters  :
**       instance - The UART instance number.
**       uartState - A pointer to the UART driver state structure
**       memory.
**     Returns : Nothing
** ===================================================================
*/
//void myUART_RxCallback(uint32_t instance, void * uartState)
//{
//  /* Write your code here ... */
//}

/*
** ===================================================================
**     Callback    : myUART_RxCallback
**     Description : This callback occurs when data are received.
**     Parameters  :
**       instance - The UART instance number.
**       uartState - A pointer to the UART driver state structure
**       memory.
**     Returns : Nothing
** ===================================================================
*/
//void myUART_RxCallback(uint32_t instance, void * uartState)
//{
//  /* Write your code here ... */
//}

/*
** ===================================================================
**     Callback    : myUART_RxCallback
**     Description : This callback occurs when data are received.
**     Parameters  :
**       instance - The UART instance number.
**       uartState - A pointer to the UART driver state structure
**       memory.
**     Returns : Nothing
** ===================================================================
*/
void myUART_RxCallback(uint32_t instance, void * uartState)
{
  /* Write your code here ... */
}

/* END Events */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
